---
- hosts: product_unifi
  vars:
    docker_user: packer
    docker_package_name: docker-ce-19.03.1-3.el7
    docker_compose_version: 1.24.1
    docker_compose_checksum: sha256:2bdab0bbf42583b4b77ee015cf908933c78f0572a7cb949a7dd8e200e6250221
    unifi_version: 5.12.66
  tasks:
    - name: install required packages
      package:
        name: "{{ item }}"
        state: present
      loop:
        - device-mapper-persistent-data
        - epel-release
        - gcc
        - git
        - lvm2
        - python-devel
        - python2-pip
        - yum-utils

    - name: install required pip packages
      pip:
        name: "{{ item }}"
      loop:
        - docker-compose

    - name: add docker yum repo
      yum_repository:
        name: docker-ce-stable
        description: 'Docker CE Stable - $basearch'
        baseurl: 'https://download.docker.com/linux/centos/7/$basearch/stable'
        enabled: true
        gpgcheck: true
        gpgkey: https://download.docker.com/linux/centos/gpg

    - name: install docker
      package:
        name: "{{ docker_package_name }}"

    - name: create /etc/docker directory
      file:
        path: /etc/docker
        state: directory

    - name: ensure docker is started
      service:
        name: docker
        state: started
        enabled: true

    - name: add rancher user to docker group
      user:
        name: "{{ docker_user }}"
        append: yes
        groups: docker

    - name: download docker-compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64"
        checksum: "{{ docker_compose_checksum }}"
        dest: /usr/local/bin/docker-compose
        mode: 0755

    - name: clone unify git repo
      git:
        repo: https://github.com/jacobalberty/unifi-docker.git
        dest: /etc/unifi-docker
        version: "{{ unifi_version }}"

    - name: Create and start unifi
      docker_compose:
        project_src: /etc/unifi-docker
      environment:
        TAG: "{{ unifi_version }}"

- hosts: product_rke
  vars:
    unifi_internal_name: unifi.noeg.wtf
    unifi_external_name: unifi.dev.noeg.wtf
  tasks:
    - name: create external unifi k8s service
      k8s:
        state: present
        definition: |
          kind: Service
          apiVersion: v1
          metadata:
            name: unifi
            namespace: unifi
          spec:
            type: ExternalName
            externalName: {{ unifi_internal_name }}

    - name: create unifi k8s ingress
      k8s:
        state: present
        definition: |
          apiVersion: networking.k8s.io/v1beta1
          kind: Ingress
          metadata:
            name: unifi
            namespace: unifi
            annotations:
              ingress.kubernetes.io/preserve-host: "false"
              kubernetes.io/ingress.class: nginx
              ingress.kubernetes.io/ssl-redirect: 'true'
              certmanager.k8s.io/acme-challenge-type: dns01
              certmanager.k8s.io/acme-dns01-provider: cloudflare
              certmanager.k8s.io/cluster-issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          spec:
            rules:
            - host: {{ unifi_external_name }}
              http:
                paths:
                - backend:
                    serviceName: unifi
                    servicePort: 8443
            tls:
            - hosts:
              - {{ unifi_external_name }}
              secretName: unifi-tls-prod

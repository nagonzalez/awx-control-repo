---

jenkins_helm_chart:
  name: jenkins
  version: 1.9.16
  release: jenkins
  namespace: jenkins
  source:
    type: repo
    location: https://kubernetes-charts.storage.googleapis.com
  state: present
  values:
    master:
      tag: "2.204.1"
      imagePullPolicy: "IfNotPresent"
      numExecutors: 1

      adminUser: "admin"
      adminPassword: "{{ global_secrets['data']['password'] }}"

      javaOpts: "-Dhudson.slaves.NodeProvisioner.initialDelay=0 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85"

      # For minikube, set this to NodePort, elsewhere use LoadBalancer
      # Use ClusterIP if your setup includes ingress controller
      serviceType: ClusterIP

      # List of plugins to be install during Jenkins master start
      installPlugins:
        - ace-editor:1.1
        - ant:1.11
        - apache-httpcomponents-client-4-api:4.5.10-2.0
        - artifactory:3.5.0
        - authentication-tokens:1.3
        - blueocean-autofavorite:1.2.4
        - blueocean-bitbucket-pipeline:1.21.0
        - blueocean-commons:1.21.0
        - blueocean-config:1.21.0
        - blueocean-core-js:1.21.0
        - blueocean-dashboard:1.21.0
        - blueocean-display-url:2.3.0
        - blueocean-events:1.21.0
        - blueocean-git-pipeline:1.21.0
        - blueocean-github-pipeline:1.21.0
        - blueocean-i18n:1.21.0
        - blueocean-jira:1.21.0
        - blueocean-jwt:1.21.0
        - blueocean-personalization:1.21.0
        - blueocean-pipeline-api-impl:1.21.0
        - blueocean-pipeline-editor:1.21.0
        - blueocean-pipeline-scm-api:1.21.0
        - blueocean-rest-impl:1.21.0
        - blueocean-rest:1.21.0
        - blueocean-web:1.21.0
        - blueocean:1.21.0
        - bouncycastle-api:2.18
        - branch-api:2.5.5
        - cloudbees-bitbucket-branch-source:2.6.0
        - cloudbees-folder:6.11
        - command-launcher:1.4
        - config-file-provider:3.6.3
        - credentials-binding:1.20
        - credentials:2.3.1
        - display-url-api:2.3.2
        - docker-commons:1.16
        - docker-workflow:1.21
        - durable-task:1.33
        - favorite:2.3.2
        - git-client:3.1.0
        - git-server:1.9
        - git:4.1.0
        - github-api:1.95
        - github-branch-source:2.5.8
        - github:1.29.5
        - google-oauth-plugin:1.0.0
        - gradle:1.36
        - handlebars:1.1.1
        - handy-uri-templates-2-api:2.1.8-1.0
        - hashicorp-vault-plugin:3.0.0
        - htmlpublisher:1.21
        - ivy:2.1
        - jackson2-api:2.10.2
        - javadoc:1.5
        - jdk-tool:1.4
        - jenkins-design-language:1.21.0
        - jira:3.0.11
        - jquery-detached:1.2.1
        - jsch:0.1.55.1
        - junit:1.28
        - kubernetes-client-api:4.6.4-2
        - kubernetes-credentials:0.6.0
        - kubernetes:1.23.0
        - lockable-resources:2.7
        - mailer:1.30
        - matrix-project:1.14
        - maven-plugin:3.4
        - mercurial:2.8
        - momentjs:1.1.1
        - oauth-credentials:0.4
        - pipeline-build-step:2.11
        - pipeline-graph-analysis:1.10
        - pipeline-input-step:2.11
        - pipeline-milestone-step:1.3.1
        - pipeline-model-api:1.5.0
        - pipeline-model-declarative-agent:1.1.1
        - pipeline-model-definition:1.5.0
        - pipeline-model-extensions:1.5.0
        - pipeline-rest-api:2.12
        - pipeline-stage-step:2.3
        - pipeline-stage-tags-metadata:1.5.0
        - pipeline-stage-view:2.12
        - plain-credentials:1.5
        - pubsub-light:1.13
        - scm-api:2.6.3
        - script-security:1.68
        - sse-gateway:1.20
        - ssh-credentials:1.18.1
        - structs:1.20
        - token-macro:2.10
        - trilead-api:1.0.5
        - variant:1.3
        - workflow-aggregator:2.6
        - workflow-api:2.38
        - workflow-basic-steps:2.19
        - workflow-cps-global-lib:2.15
        - workflow-cps:2.78
        - workflow-durable-task-step:2.35
        - workflow-job:2.36
        - workflow-multibranch:2.21
        - workflow-scm-step:2.9
        - workflow-step-api:2.22
        - workflow-support:3.4

      # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
      scriptApproval:
        - method hudson.PluginManager getPlugins
        - method hudson.PluginWrapper getShortName
        - method hudson.PluginWrapper getVersion
        - method jenkins.model.Jenkins getPluginManager
        - new java.util.ArrayList
        - staticMethod jenkins.model.Jenkins getInstance

      # Below is the implementation of Jenkins Configuration as Code.  Add a key under configScripts for each configuration area,
      # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
      # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
      # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration yaml file on the master in
      # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code Plugin.  The lines after each |
      # become the content of the configuration yaml file.  The first line after this is a JCasC root element, eg jenkins, credentials,
      # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.  The example below creates a welcome message:
      JCasC:
        enabled: false
        pluginVersion: "1.35"
        configScripts:
          jenkins-security: |
            security:
              queueItemAuthenticator:
                authenticators:
                - global:
                    strategy: "triggeringUsersAuthorizationStrategy"

      ingress:
        enabled: true
        annotations:
          ingress.kubernetes.io/ssl-redirect: 'true'
          kubernetes.io/ingress.class: nginx
          certmanager.k8s.io/acme-challenge-type: dns01
          certmanager.k8s.io/acme-dns01-provider: cloudflare
          certmanager.k8s.io/cluster-issuer: letsencrypt-prod
        hostName: jenkins.dev.noeg.wtf
        tls:
        - secretName: jenkins-tls-prod
          hosts:
            - jenkins.dev.noeg.wtf

    agent:
      image: "noeagonzalez/jnlp-slave"
      tag: "3.40-1"
      privileged: true

      resources:
        requests:
          cpu: "200m"
          memory: "256Mi"
        limits:
          cpu: "2000m"
          memory: "4096Mi"

      volumes:
        - type: HostPath
          volumeName: docker-sock
          hostPath: /var/run/docker.sock
          mountPath: /var/run/docker.sock

      yamlTemplate: |-
        spec:
          securityContext:
            runAsUser: 0

    persistence:
      enabled: true
